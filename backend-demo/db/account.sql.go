// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const addBalance = `-- name: AddBalance :exec
update account set balance = balance + ? where id = ?
`

type AddBalanceParams struct {
	Amount int64         `json:"amount"`
	ID     sql.NullInt64 `json:"id"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) error {
	_, err := q.db.ExecContext(ctx, addBalance, arg.Amount, arg.ID)
	return err
}

const createAccount = `-- name: CreateAccount :execresult
insert into account (account_owner, balance, currency) values (?, ?, ?)
`

type CreateAccountParams struct {
	AccountOwner string `json:"accountOwner"`
	Balance      int64  `json:"balance"`
	Currency     string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.AccountOwner, arg.Balance, arg.Currency)
}

const deleteAccount = `-- name: DeleteAccount :exec
delete from account where id = ? limit 1
`

func (q *Queries) DeleteAccount(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
select id, account_owner, balance, currency, created_at, updated_at from account
where id = ? limit 1
`

func (q *Queries) GetAccount(ctx context.Context, id sql.NullInt64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountOwner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
select id, account_owner, balance, currency, created_at, updated_at from account
order by id limit ?, ?
`

type ListAccountParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountOwner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
