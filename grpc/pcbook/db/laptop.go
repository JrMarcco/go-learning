// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"go-learning/grpc/pcbook/db/laptop"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Laptop is the model entity for the Laptop schema.
type Laptop struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// LaptopName holds the value of the "laptop_name" field.
	LaptopName string `json:"laptop_name,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// PriceRmb holds the value of the "price_rmb" field.
	PriceRmb uint32 `json:"price_rmb,omitempty"`
	// ReleaseYear holds the value of the "release_year" field.
	ReleaseYear uint32 `json:"release_year,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Laptop) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case laptop.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case laptop.FieldID, laptop.FieldPriceRmb, laptop.FieldReleaseYear:
			values[i] = new(sql.NullInt64)
		case laptop.FieldUID, laptop.FieldBrand, laptop.FieldLaptopName:
			values[i] = new(sql.NullString)
		case laptop.FieldCreatedAt, laptop.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Laptop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Laptop fields.
func (l *Laptop) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case laptop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint64(value.Int64)
		case laptop.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				l.UID = value.String
			}
		case laptop.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				l.Brand = value.String
			}
		case laptop.FieldLaptopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field laptop_name", values[i])
			} else if value.Valid {
				l.LaptopName = value.String
			}
		case laptop.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				l.Weight = value.Float64
			}
		case laptop.FieldPriceRmb:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_rmb", values[i])
			} else if value.Valid {
				l.PriceRmb = uint32(value.Int64)
			}
		case laptop.FieldReleaseYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field release_year", values[i])
			} else if value.Valid {
				l.ReleaseYear = uint32(value.Int64)
			}
		case laptop.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case laptop.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Laptop.
// Note that you need to call Laptop.Unwrap() before calling this method if this Laptop
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Laptop) Update() *LaptopUpdateOne {
	return (&LaptopClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Laptop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Laptop) Unwrap() *Laptop {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("db: Laptop is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Laptop) String() string {
	var builder strings.Builder
	builder.WriteString("Laptop(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("uid=")
	builder.WriteString(l.UID)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(l.Brand)
	builder.WriteString(", ")
	builder.WriteString("laptop_name=")
	builder.WriteString(l.LaptopName)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", l.Weight))
	builder.WriteString(", ")
	builder.WriteString("price_rmb=")
	builder.WriteString(fmt.Sprintf("%v", l.PriceRmb))
	builder.WriteString(", ")
	builder.WriteString("release_year=")
	builder.WriteString(fmt.Sprintf("%v", l.ReleaseYear))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Laptops is a parsable slice of Laptop.
type Laptops []*Laptop

func (l Laptops) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
