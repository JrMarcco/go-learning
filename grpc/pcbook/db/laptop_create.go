// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/JrMarcco/go-learning/grpc/pcbook/db/laptop"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LaptopCreate is the builder for creating a Laptop entity.
type LaptopCreate struct {
	config
	mutation *LaptopMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (lc *LaptopCreate) SetUID(s string) *LaptopCreate {
	lc.mutation.SetUID(s)
	return lc
}

// SetBrand sets the "brand" field.
func (lc *LaptopCreate) SetBrand(s string) *LaptopCreate {
	lc.mutation.SetBrand(s)
	return lc
}

// SetLaptopName sets the "laptop_name" field.
func (lc *LaptopCreate) SetLaptopName(s string) *LaptopCreate {
	lc.mutation.SetLaptopName(s)
	return lc
}

// SetWeight sets the "weight" field.
func (lc *LaptopCreate) SetWeight(f float64) *LaptopCreate {
	lc.mutation.SetWeight(f)
	return lc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (lc *LaptopCreate) SetNillableWeight(f *float64) *LaptopCreate {
	if f != nil {
		lc.SetWeight(*f)
	}
	return lc
}

// SetPriceRmb sets the "price_rmb" field.
func (lc *LaptopCreate) SetPriceRmb(u uint32) *LaptopCreate {
	lc.mutation.SetPriceRmb(u)
	return lc
}

// SetNillablePriceRmb sets the "price_rmb" field if the given value is not nil.
func (lc *LaptopCreate) SetNillablePriceRmb(u *uint32) *LaptopCreate {
	if u != nil {
		lc.SetPriceRmb(*u)
	}
	return lc
}

// SetReleaseYear sets the "release_year" field.
func (lc *LaptopCreate) SetReleaseYear(u uint32) *LaptopCreate {
	lc.mutation.SetReleaseYear(u)
	return lc
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (lc *LaptopCreate) SetNillableReleaseYear(u *uint32) *LaptopCreate {
	if u != nil {
		lc.SetReleaseYear(*u)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LaptopCreate) SetCreatedAt(t time.Time) *LaptopCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LaptopCreate) SetNillableCreatedAt(t *time.Time) *LaptopCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LaptopCreate) SetUpdatedAt(t time.Time) *LaptopCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LaptopCreate) SetNillableUpdatedAt(t *time.Time) *LaptopCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// Mutation returns the LaptopMutation object of the builder.
func (lc *LaptopCreate) Mutation() *LaptopMutation {
	return lc.mutation
}

// Save creates the Laptop in the database.
func (lc *LaptopCreate) Save(ctx context.Context) (*Laptop, error) {
	var (
		err  error
		node *Laptop
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaptopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Laptop)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LaptopMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LaptopCreate) SaveX(ctx context.Context) *Laptop {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LaptopCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LaptopCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LaptopCreate) defaults() {
	if _, ok := lc.mutation.Weight(); !ok {
		v := laptop.DefaultWeight
		lc.mutation.SetWeight(v)
	}
	if _, ok := lc.mutation.PriceRmb(); !ok {
		v := laptop.DefaultPriceRmb
		lc.mutation.SetPriceRmb(v)
	}
	if _, ok := lc.mutation.ReleaseYear(); !ok {
		v := laptop.DefaultReleaseYear
		lc.mutation.SetReleaseYear(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := laptop.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := laptop.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LaptopCreate) check() error {
	if _, ok := lc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`db: missing required field "Laptop.uid"`)}
	}
	if v, ok := lc.mutation.UID(); ok {
		if err := laptop.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`db: validator failed for field "Laptop.uid": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`db: missing required field "Laptop.brand"`)}
	}
	if v, ok := lc.mutation.Brand(); ok {
		if err := laptop.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`db: validator failed for field "Laptop.brand": %w`, err)}
		}
	}
	if _, ok := lc.mutation.LaptopName(); !ok {
		return &ValidationError{Name: "laptop_name", err: errors.New(`db: missing required field "Laptop.laptop_name"`)}
	}
	if v, ok := lc.mutation.LaptopName(); ok {
		if err := laptop.LaptopNameValidator(v); err != nil {
			return &ValidationError{Name: "laptop_name", err: fmt.Errorf(`db: validator failed for field "Laptop.laptop_name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`db: missing required field "Laptop.weight"`)}
	}
	if _, ok := lc.mutation.PriceRmb(); !ok {
		return &ValidationError{Name: "price_rmb", err: errors.New(`db: missing required field "Laptop.price_rmb"`)}
	}
	if _, ok := lc.mutation.ReleaseYear(); !ok {
		return &ValidationError{Name: "release_year", err: errors.New(`db: missing required field "Laptop.release_year"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Laptop.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Laptop.updated_at"`)}
	}
	return nil
}

func (lc *LaptopCreate) sqlSave(ctx context.Context) (*Laptop, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (lc *LaptopCreate) createSpec() (*Laptop, *sqlgraph.CreateSpec) {
	var (
		_node = &Laptop{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: laptop.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: laptop.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.UID(); ok {
		_spec.SetField(laptop.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := lc.mutation.Brand(); ok {
		_spec.SetField(laptop.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := lc.mutation.LaptopName(); ok {
		_spec.SetField(laptop.FieldLaptopName, field.TypeString, value)
		_node.LaptopName = value
	}
	if value, ok := lc.mutation.Weight(); ok {
		_spec.SetField(laptop.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := lc.mutation.PriceRmb(); ok {
		_spec.SetField(laptop.FieldPriceRmb, field.TypeUint32, value)
		_node.PriceRmb = value
	}
	if value, ok := lc.mutation.ReleaseYear(); ok {
		_spec.SetField(laptop.FieldReleaseYear, field.TypeUint32, value)
		_node.ReleaseYear = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(laptop.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(laptop.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LaptopCreateBulk is the builder for creating many Laptop entities in bulk.
type LaptopCreateBulk struct {
	config
	builders []*LaptopCreate
}

// Save creates the Laptop entities in the database.
func (lcb *LaptopCreateBulk) Save(ctx context.Context) ([]*Laptop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Laptop, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LaptopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LaptopCreateBulk) SaveX(ctx context.Context) []*Laptop {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LaptopCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LaptopCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
