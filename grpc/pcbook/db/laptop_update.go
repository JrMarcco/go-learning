// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"go-learning/grpc/pcbook/db/laptop"
	"go-learning/grpc/pcbook/db/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LaptopUpdate is the builder for updating Laptop entities.
type LaptopUpdate struct {
	config
	hooks    []Hook
	mutation *LaptopMutation
}

// Where appends a list predicates to the LaptopUpdate builder.
func (lu *LaptopUpdate) Where(ps ...predicate.Laptop) *LaptopUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUID sets the "uid" field.
func (lu *LaptopUpdate) SetUID(s string) *LaptopUpdate {
	lu.mutation.SetUID(s)
	return lu
}

// SetBrand sets the "brand" field.
func (lu *LaptopUpdate) SetBrand(s string) *LaptopUpdate {
	lu.mutation.SetBrand(s)
	return lu
}

// SetName sets the "name" field.
func (lu *LaptopUpdate) SetName(s string) *LaptopUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetWeight sets the "weight" field.
func (lu *LaptopUpdate) SetWeight(f float64) *LaptopUpdate {
	lu.mutation.ResetWeight()
	lu.mutation.SetWeight(f)
	return lu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (lu *LaptopUpdate) SetNillableWeight(f *float64) *LaptopUpdate {
	if f != nil {
		lu.SetWeight(*f)
	}
	return lu
}

// AddWeight adds f to the "weight" field.
func (lu *LaptopUpdate) AddWeight(f float64) *LaptopUpdate {
	lu.mutation.AddWeight(f)
	return lu
}

// SetPriceRmb sets the "price_rmb" field.
func (lu *LaptopUpdate) SetPriceRmb(u uint32) *LaptopUpdate {
	lu.mutation.ResetPriceRmb()
	lu.mutation.SetPriceRmb(u)
	return lu
}

// SetNillablePriceRmb sets the "price_rmb" field if the given value is not nil.
func (lu *LaptopUpdate) SetNillablePriceRmb(u *uint32) *LaptopUpdate {
	if u != nil {
		lu.SetPriceRmb(*u)
	}
	return lu
}

// AddPriceRmb adds u to the "price_rmb" field.
func (lu *LaptopUpdate) AddPriceRmb(u int32) *LaptopUpdate {
	lu.mutation.AddPriceRmb(u)
	return lu
}

// SetReleaseYear sets the "release_year" field.
func (lu *LaptopUpdate) SetReleaseYear(u uint32) *LaptopUpdate {
	lu.mutation.ResetReleaseYear()
	lu.mutation.SetReleaseYear(u)
	return lu
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (lu *LaptopUpdate) SetNillableReleaseYear(u *uint32) *LaptopUpdate {
	if u != nil {
		lu.SetReleaseYear(*u)
	}
	return lu
}

// AddReleaseYear adds u to the "release_year" field.
func (lu *LaptopUpdate) AddReleaseYear(u int32) *LaptopUpdate {
	lu.mutation.AddReleaseYear(u)
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LaptopUpdate) SetCreatedAt(t time.Time) *LaptopUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LaptopUpdate) SetNillableCreatedAt(t *time.Time) *LaptopUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LaptopUpdate) SetUpdatedAt(t time.Time) *LaptopUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// Mutation returns the LaptopMutation object of the builder.
func (lu *LaptopUpdate) Mutation() *LaptopMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LaptopUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lu.defaults()
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaptopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LaptopUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LaptopUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LaptopUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LaptopUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := laptop.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LaptopUpdate) check() error {
	if v, ok := lu.mutation.UID(); ok {
		if err := laptop.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`db: validator failed for field "Laptop.uid": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Brand(); ok {
		if err := laptop.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`db: validator failed for field "Laptop.brand": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Name(); ok {
		if err := laptop.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Laptop.name": %w`, err)}
		}
	}
	return nil
}

func (lu *LaptopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   laptop.Table,
			Columns: laptop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: laptop.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UID(); ok {
		_spec.SetField(laptop.FieldUID, field.TypeString, value)
	}
	if value, ok := lu.mutation.Brand(); ok {
		_spec.SetField(laptop.FieldBrand, field.TypeString, value)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(laptop.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.Weight(); ok {
		_spec.SetField(laptop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedWeight(); ok {
		_spec.AddField(laptop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.PriceRmb(); ok {
		_spec.SetField(laptop.FieldPriceRmb, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedPriceRmb(); ok {
		_spec.AddField(laptop.FieldPriceRmb, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.ReleaseYear(); ok {
		_spec.SetField(laptop.FieldReleaseYear, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.AddedReleaseYear(); ok {
		_spec.AddField(laptop.FieldReleaseYear, field.TypeUint32, value)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(laptop.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(laptop.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{laptop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LaptopUpdateOne is the builder for updating a single Laptop entity.
type LaptopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LaptopMutation
}

// SetUID sets the "uid" field.
func (luo *LaptopUpdateOne) SetUID(s string) *LaptopUpdateOne {
	luo.mutation.SetUID(s)
	return luo
}

// SetBrand sets the "brand" field.
func (luo *LaptopUpdateOne) SetBrand(s string) *LaptopUpdateOne {
	luo.mutation.SetBrand(s)
	return luo
}

// SetName sets the "name" field.
func (luo *LaptopUpdateOne) SetName(s string) *LaptopUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetWeight sets the "weight" field.
func (luo *LaptopUpdateOne) SetWeight(f float64) *LaptopUpdateOne {
	luo.mutation.ResetWeight()
	luo.mutation.SetWeight(f)
	return luo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (luo *LaptopUpdateOne) SetNillableWeight(f *float64) *LaptopUpdateOne {
	if f != nil {
		luo.SetWeight(*f)
	}
	return luo
}

// AddWeight adds f to the "weight" field.
func (luo *LaptopUpdateOne) AddWeight(f float64) *LaptopUpdateOne {
	luo.mutation.AddWeight(f)
	return luo
}

// SetPriceRmb sets the "price_rmb" field.
func (luo *LaptopUpdateOne) SetPriceRmb(u uint32) *LaptopUpdateOne {
	luo.mutation.ResetPriceRmb()
	luo.mutation.SetPriceRmb(u)
	return luo
}

// SetNillablePriceRmb sets the "price_rmb" field if the given value is not nil.
func (luo *LaptopUpdateOne) SetNillablePriceRmb(u *uint32) *LaptopUpdateOne {
	if u != nil {
		luo.SetPriceRmb(*u)
	}
	return luo
}

// AddPriceRmb adds u to the "price_rmb" field.
func (luo *LaptopUpdateOne) AddPriceRmb(u int32) *LaptopUpdateOne {
	luo.mutation.AddPriceRmb(u)
	return luo
}

// SetReleaseYear sets the "release_year" field.
func (luo *LaptopUpdateOne) SetReleaseYear(u uint32) *LaptopUpdateOne {
	luo.mutation.ResetReleaseYear()
	luo.mutation.SetReleaseYear(u)
	return luo
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (luo *LaptopUpdateOne) SetNillableReleaseYear(u *uint32) *LaptopUpdateOne {
	if u != nil {
		luo.SetReleaseYear(*u)
	}
	return luo
}

// AddReleaseYear adds u to the "release_year" field.
func (luo *LaptopUpdateOne) AddReleaseYear(u int32) *LaptopUpdateOne {
	luo.mutation.AddReleaseYear(u)
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LaptopUpdateOne) SetCreatedAt(t time.Time) *LaptopUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LaptopUpdateOne) SetNillableCreatedAt(t *time.Time) *LaptopUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LaptopUpdateOne) SetUpdatedAt(t time.Time) *LaptopUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// Mutation returns the LaptopMutation object of the builder.
func (luo *LaptopUpdateOne) Mutation() *LaptopMutation {
	return luo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LaptopUpdateOne) Select(field string, fields ...string) *LaptopUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Laptop entity.
func (luo *LaptopUpdateOne) Save(ctx context.Context) (*Laptop, error) {
	var (
		err  error
		node *Laptop
	)
	luo.defaults()
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaptopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, luo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Laptop)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LaptopMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LaptopUpdateOne) SaveX(ctx context.Context) *Laptop {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LaptopUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LaptopUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LaptopUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := laptop.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LaptopUpdateOne) check() error {
	if v, ok := luo.mutation.UID(); ok {
		if err := laptop.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`db: validator failed for field "Laptop.uid": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Brand(); ok {
		if err := laptop.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`db: validator failed for field "Laptop.brand": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Name(); ok {
		if err := laptop.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Laptop.name": %w`, err)}
		}
	}
	return nil
}

func (luo *LaptopUpdateOne) sqlSave(ctx context.Context) (_node *Laptop, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   laptop.Table,
			Columns: laptop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: laptop.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Laptop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, laptop.FieldID)
		for _, f := range fields {
			if !laptop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != laptop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UID(); ok {
		_spec.SetField(laptop.FieldUID, field.TypeString, value)
	}
	if value, ok := luo.mutation.Brand(); ok {
		_spec.SetField(laptop.FieldBrand, field.TypeString, value)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(laptop.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.Weight(); ok {
		_spec.SetField(laptop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedWeight(); ok {
		_spec.AddField(laptop.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.PriceRmb(); ok {
		_spec.SetField(laptop.FieldPriceRmb, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedPriceRmb(); ok {
		_spec.AddField(laptop.FieldPriceRmb, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.ReleaseYear(); ok {
		_spec.SetField(laptop.FieldReleaseYear, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.AddedReleaseYear(); ok {
		_spec.AddField(laptop.FieldReleaseYear, field.TypeUint32, value)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(laptop.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(laptop.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Laptop{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{laptop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
