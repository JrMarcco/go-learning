// Code generated by ent, DO NOT EDIT.

package laptop

import (
	"go-learning/grpc/pcbook/db/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// LaptopName applies equality check predicate on the "laptop_name" field. It's identical to LaptopNameEQ.
func LaptopName(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLaptopName), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// PriceRmb applies equality check predicate on the "price_rmb" field. It's identical to PriceRmbEQ.
func PriceRmb(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceRmb), v))
	})
}

// ReleaseYear applies equality check predicate on the "release_year" field. It's identical to ReleaseYearEQ.
func ReleaseYear(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseYear), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUID), v))
	})
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUID), v))
	})
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUID), v))
	})
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUID), v))
	})
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUID), v))
	})
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrand), v))
	})
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrand), v...))
	})
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrand), v...))
	})
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrand), v))
	})
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrand), v))
	})
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrand), v))
	})
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrand), v))
	})
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrand), v))
	})
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrand), v))
	})
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrand), v))
	})
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrand), v))
	})
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrand), v))
	})
}

// LaptopNameEQ applies the EQ predicate on the "laptop_name" field.
func LaptopNameEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLaptopName), v))
	})
}

// LaptopNameNEQ applies the NEQ predicate on the "laptop_name" field.
func LaptopNameNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLaptopName), v))
	})
}

// LaptopNameIn applies the In predicate on the "laptop_name" field.
func LaptopNameIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLaptopName), v...))
	})
}

// LaptopNameNotIn applies the NotIn predicate on the "laptop_name" field.
func LaptopNameNotIn(vs ...string) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLaptopName), v...))
	})
}

// LaptopNameGT applies the GT predicate on the "laptop_name" field.
func LaptopNameGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLaptopName), v))
	})
}

// LaptopNameGTE applies the GTE predicate on the "laptop_name" field.
func LaptopNameGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLaptopName), v))
	})
}

// LaptopNameLT applies the LT predicate on the "laptop_name" field.
func LaptopNameLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLaptopName), v))
	})
}

// LaptopNameLTE applies the LTE predicate on the "laptop_name" field.
func LaptopNameLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLaptopName), v))
	})
}

// LaptopNameContains applies the Contains predicate on the "laptop_name" field.
func LaptopNameContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLaptopName), v))
	})
}

// LaptopNameHasPrefix applies the HasPrefix predicate on the "laptop_name" field.
func LaptopNameHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLaptopName), v))
	})
}

// LaptopNameHasSuffix applies the HasSuffix predicate on the "laptop_name" field.
func LaptopNameHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLaptopName), v))
	})
}

// LaptopNameEqualFold applies the EqualFold predicate on the "laptop_name" field.
func LaptopNameEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLaptopName), v))
	})
}

// LaptopNameContainsFold applies the ContainsFold predicate on the "laptop_name" field.
func LaptopNameContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLaptopName), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// PriceRmbEQ applies the EQ predicate on the "price_rmb" field.
func PriceRmbEQ(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceRmb), v))
	})
}

// PriceRmbNEQ applies the NEQ predicate on the "price_rmb" field.
func PriceRmbNEQ(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceRmb), v))
	})
}

// PriceRmbIn applies the In predicate on the "price_rmb" field.
func PriceRmbIn(vs ...uint32) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPriceRmb), v...))
	})
}

// PriceRmbNotIn applies the NotIn predicate on the "price_rmb" field.
func PriceRmbNotIn(vs ...uint32) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPriceRmb), v...))
	})
}

// PriceRmbGT applies the GT predicate on the "price_rmb" field.
func PriceRmbGT(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceRmb), v))
	})
}

// PriceRmbGTE applies the GTE predicate on the "price_rmb" field.
func PriceRmbGTE(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceRmb), v))
	})
}

// PriceRmbLT applies the LT predicate on the "price_rmb" field.
func PriceRmbLT(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceRmb), v))
	})
}

// PriceRmbLTE applies the LTE predicate on the "price_rmb" field.
func PriceRmbLTE(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceRmb), v))
	})
}

// ReleaseYearEQ applies the EQ predicate on the "release_year" field.
func ReleaseYearEQ(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseYear), v))
	})
}

// ReleaseYearNEQ applies the NEQ predicate on the "release_year" field.
func ReleaseYearNEQ(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseYear), v))
	})
}

// ReleaseYearIn applies the In predicate on the "release_year" field.
func ReleaseYearIn(vs ...uint32) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReleaseYear), v...))
	})
}

// ReleaseYearNotIn applies the NotIn predicate on the "release_year" field.
func ReleaseYearNotIn(vs ...uint32) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReleaseYear), v...))
	})
}

// ReleaseYearGT applies the GT predicate on the "release_year" field.
func ReleaseYearGT(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseYear), v))
	})
}

// ReleaseYearGTE applies the GTE predicate on the "release_year" field.
func ReleaseYearGTE(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseYear), v))
	})
}

// ReleaseYearLT applies the LT predicate on the "release_year" field.
func ReleaseYearLT(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseYear), v))
	})
}

// ReleaseYearLTE applies the LTE predicate on the "release_year" field.
func ReleaseYearLTE(v uint32) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseYear), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Laptop {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		p(s.Not())
	})
}
